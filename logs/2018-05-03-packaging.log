Ed Page @epage May 03 12:00
Welcome everyone!

ashley williams @ashleygwilliams May 03 12:00
hello!

Ed Page @epage May 03 12:00
I'll be taking notes at https://public.etherpad-mozilla.org/p/crate-packaging
That also has some ideas for us to talk about

Just to get the conversation started while we wait for people to trickle in, I've gotten a prototype of stager created.
https://github.com/crate-ci/stager

stager is a general mechanism to describe how you want to layout files and whee they are sourced from. My hope is that we can use this as a shared language / mechanism for each of our packaging tools
Also, as part of my goal of dropping trust boiler plate down to 0, I've started on the first client of stager, cargo-tarball
https://github.com/crate-ci/cargo-tarball
I'm dogfooding cargo-tarball to guide me in what features to develop.
So far its configuration
https://github.com/crate-ci/cargo-tarball/blob/master/tarball-config.yml
and hand-authored data that we want to eventually harvest
https://github.com/crate-ci/cargo-tarball/blob/master/data/crate.yml

Pascal Hertleif @killercup May 03 12:04
i have but one question: is it self hosting releasing yet? :smiley:

Ed Page @epage May 03 12:05
Working towards it. I think by this weekend it will be.

Pascal Hertleif @killercup May 03 12:06
very cool
can you talk a bit about what the config files are supposed to tell us?
i assume the tarball-config lists a bunch of target files and how to build them?

Ed Page @epage May 03 12:07
Where to source them from, yes
The root directory being the root of the tarball
SourceFiles uses the awesome globwalk and can support one or more patterns

Pascal Hertleif @killercup May 03 12:08
i see, so SourceFiles is basically an interface for a clever cp

Ed Page @epage May 03 12:08
I don't have that great of documentation yet. For the schema, its best to look at
https://docs.rs/stager/0.3.4/stager/de/index.html
https://github.com/crate-ci/cargo-tarball/blob/master/src/de.rs#L18
Yup

Pascal Hertleif @killercup May 03 12:08
i'm asking because "{{cargo.target_directory}}/debug/build/cargo-tarball-b8d713fa01725c21/out/completions" looks pretty fragile

Ed Page @epage May 03 12:09
Yes, that is why I don't consider it self-releasing yet
If you look at that file, its been improving
*files history

Pascal Hertleif @killercup May 03 12:10
cool

Ed Page @epage May 03 12:10
Still unsure if we should have the configuration in a Cargo.toml [metadata] or have a distinct file for all packaging needs

Pascal Hertleif @killercup May 03 12:10
what's your ideal version of this file? do you envision having a "CargoBin" type as well?

Ed Page @epage May 03 12:10
The idea would be to have tiered configuration. There is per-package system configuration that would merge in defaults from a global configuration

Kornel @kornelski May 03 12:11
Sorry, I don't get what stager is for. Who's the user of it - crate author? os-specific packaging crate?

Pascal Hertleif @killercup May 03 12:11
putting that into Cargo.toml sounds good to me, if it's not too verbose

Ed Page @epage May 03 12:11
@kornelski
os-specific packaging crates

Pascal Hertleif @killercup May 03 12:11
i think stager should eventually be able to drive tools like cargo-deb and cargo-rpm, right?

Ed Page @epage May 03 12:12
@killercup There might later be a CargoBin. Its not absolutely needed as an MVP so I'm going to wait and see how that evolves
@killercup thats the idea. I'm actually taking the idea from how my company supports distributing binaries for multiple package management systems
I think someone else pointed out a similar non-rust open source project

Kornel @kornelski May 03 12:13
how does crate author interact with stager, e.g. to define post-install scripts?

Ed Page @epage May 03 12:13
https://sbt-native-packager.readthedocs.io/en/stable/

Dylan DPC @Dylan-DPC May 03 12:13
so it pushes to apt, rpm etc on linux?

Ed Page @epage May 03 12:15
@kornelski this is used for laying out files that will get installed. A crate author might create a config like this
https://github.com/crate-ci/cargo-tarball/blob/master/tarball-config.yml
iirc postinst scripts don't generally get treated as normal files, so a cargo-made-up-pkg-format generally wouldn't use stager for those

Pascal Hertleif @killercup May 03 12:15
insert killercup anti-auto-publishing rant here

Dylan DPC @Dylan-DPC May 03 12:15
:joy:

Kornel @kornelski May 03 12:16
@epage that's not made up pkg format, that's deb, and an existing feature of cargo-deb

Ed Page @epage May 03 12:16
@Dylan-DPC stager is a general format, independent of types. Someone could then describe their artifacts using stager for cargo-tarball. That will create the package but then you need to distribute it

Dylan DPC @Dylan-DPC May 03 12:17
okay

Ed Page @epage May 03 12:17
@kornelski I was saying for example purposes and didn't want to prescribe that cargo-deb use stager though I'd like them to

Kornel @kornelski May 03 12:17
I'm the developer of cargo-deb, and I'm trying to, so that's why I'm here

Ed Page @epage May 03 12:18
Oh, cool
(can't remember who maintains what)

So stager would fill the role of describing assets

    assets: Files to be included in the package and the permissions to assign them. If assets are not specified, then defaults are taken from binaries explicitly listed in [[bin]] (copied to /usr/bin/) and package readme (copied to usr/share/doc/…). 


Pascal Hertleif @killercup May 03 12:19
@epage i assume stager would be able to forward config values to the package impl it calls, so if you have a [metadata.deb] section it could foward that to cargo-deb, right?

Ed Page @epage May 03 12:19
More like cargo-deb would forward its assets section to stager

Pascal Hertleif @killercup May 03 12:19
ah okay

Kornel @kornelski May 03 12:19
the assets thing has problems, e.g. the docs should get gz-compressed before being put in deb
I do that automatically for crate's own readme

Ed Page @epage May 03 12:20
Good to know, I've created crate-ci/stager#18
Please add any more requirements you are aware of

Kornel @kornelski May 03 12:21
another issue is cargo uses different target directory layout when cross-compiling
so I have logic to automagically correct target/release/foo to the correct path

Pascal Hertleif @killercup May 03 12:21
stager does… stages, right? so, is "generating man pages" a stage and "compress a bunch of the files we collected" another stage?
@kornelski does cargo builds json output give you any useful information there?

Ed Page @epage May 03 12:22
It stages as in it drops everything into an intermediate location. Some forms of data generation will still be on the client though general ones we can build in, like compressing

Kornel @kornelski May 03 12:22
and debian package is a russian doll of ( xz archive + gz archive + metadata ) all in ar archive

Pascal Hertleif @killercup May 03 12:22
hahaha
sent over http with deflate on

Kornel @kornelski May 03 12:23
@killercup I use cargo metadata for some things, but it's woefully incomplete

Ed Page @epage May 03 12:23
Compressing the staged directory is left to the client. cargo-tarball currently does this
https://github.com/crate-ci/cargo-tarball/blob/master/src/compress.rs

Kornel @kornelski May 03 12:23
so I then parse cargo.toml
and the rest is based on shoddy assumptions :grinning:

Ed Page @epage May 03 12:23
Yeah, @kornelski the incompleteness is what I'm currently running into

Pascal Hertleif @killercup May 03 12:23
have you bugged the cargo team about that?
i can mention this to them as something that's blocking cli-wg progress if you want me to

Ed Page @epage May 03 12:24
I think the problem is that cargo-metadata is effectively describing the manifest file. We're needing environment information

Pascal Hertleif @killercup May 03 12:24
yeah, that's why i asked about cargo-build's ouput

Ed Page @epage May 03 12:25
That was what I was going to look into next
Granted this issue might help
https://github.com/rust-lang/cargo/pull/5203#issuecomment-380442967
@kornelski how I planned to structure cargo-tarball is that it will have a default policy for how to automatically stage common patterns (bins, completions). The user can then augment that stage or disable it and completely control it
I provide variable substitutions to help the user construct their staged configuration

Pascal Hertleif @killercup May 03 12:29
fyi, compiling cargo-fix with cargo build --message-format json | jq i get:
```json

...
{
  "features": [],
  "filenames": [
    "/Users/pascal/Projekte/rustfix/target/debug/cargo-fix",
    "/Users/pascal/Projekte/rustfix/target/debug/cargo-fix.dSYM"
  ],
  "fresh": true,
  "package_id": "cargo-fix 0.2.0 (path+file:///Users/pascal/Projekte/rustfix/cargo-fix)",
  "profile": {
    "debug_assertions": true,
    "debuginfo": 2,
    "opt_level": "0",
    "overflow_checks": true,
    "test": false
  },
  "reason": "compiler-artifact",
  "target": {
    "crate_types": [
      "bin"
    ],
    "kind": [
      "bin"
    ],
    "name": "cargo-fix",
    "src_path": "/Users/pascal/Projekte/rustfix/cargo-fix/src/main.rs"
  }
}
```

which is only semi-helpful as there is no information which of the filenames is a useful binary

Kornel @kornelski May 03 12:30
Yes, I might have had the same problem

Ed Page @epage May 03 12:31
RE rust-lang/cargo#5203 it seems like this could be useful for build.rs generated artifacts and not just choosing where to output the binary. @killercup mind looking over that and chiming in?
Not sure if its just I've not been clear about how that helps the CLI-WG or if I don't understand the complications from the cargo side of providing it

Kornel @kornelski May 03 12:31
and the binary is .exe on windows, and you can't use https://doc.rust-lang.org/std/env/consts/index.html to get the extension, because it doesn't work for cross-compiling
rust-lang/cargo#5457
regarding building of other artifacts, I assumed OUT_DIR is for temporary/private stuff that isn't an end-product

Ed Page @epage May 03 12:33
Yup but afaik there isn't yet a different place to output them to? Resolving your issue would give us that

Kornel @kornelski May 03 12:34
Yeah, so I think exposing CARGO_TARGET_DIR to build.rs would make sense here

Ed Page @epage May 03 12:34
I'm not fully aware of each variable and its intent but the intent I agree with

Kornel @kornelski May 03 12:36
xcode has BUILT_PRODUCTS_DIR https://help.apple.com/xcode/mac/8.0/#/itcaec37c2a6

Pascal Hertleif @killercup May 03 12:37
@epage not sure i follow the --out-dir issue

Ed Page @epage May 03 12:37
Ok, so far, we've talked about

    platform-requirements for assets, like compressing them
    challenges of finding assets, including cargo changing where it out puts it depending on circumstances and dealing with .exe when cross-compiling
    stager as a possible common way of specifying additiional assets

@killercup Its related to rust-lang/cargo#5457
--out-dir seems to be a mechanism to make it easier to find specific final artifacts (the binary). I was bringing up the concern about build.rs possibly creating other final, and not temporary, artifacts, like completions.
and not having a way to find them
As was pointed out, my current way of getting completions is broken
path: "{{cargo.target_directory}}/debug/build/cargo-tarball-b8d713fa01725c21/out/completions"
I was bringing up the idea of exposing --out-dir as an environment variable for build.rs

Dylan DPC @Dylan-DPC 12:40
what is completions?

Ed Page @epage May 03 12:40
completions are scripts to augment your shell so you can tab complete command line arguments like you do file paths

Dylan DPC @Dylan-DPC 12:41
ah that okay :grinning: thx

Ed Page @epage May 03 12:41
Its an easy illustration of final artifacts

Kornel @kornelski 12:42
Are there use-cases for packaging workspaces? mmstick/cargo-deb#49

Pascal Hertleif @killercup 12:42
@epage how would --out-dir change the name of the artifact?
oh, because you only care about the hashed directory name for the files you generate yourself and put in the out dir, got it

Ed Page @epage May 03 12:44
Yeah, so if the user specifies where they want final artifacts written, I have some mechanism for my build.rs artifacts to also go there so I don't have to try to find them in a hashed directory
@kornelski workspaces are a beast I've completely ignored for now :worried:
Do you release all crates in lock step or tag the repo individually? If the latter, we need to work out a consistent practice for doing so so a CI can recognize what is getting released and only cargo-deb that one

Kornel @kornelski 12:46
Current implementation in cargo-deb is to use whatever cargo metadata provides, which I think gives it a flattened view of the workspace

Ed Page @epage May 03 12:47
Do you then gather artifacts from each package?
@kornelski What are your thoughts on cargo-deb using stager for describing artifacts, whether the user defined ones or the built-in ones?

Kornel @kornelski 12:48
Yes I currently build a single package from all exe/dylib targets found in metadata

Ed Page @epage May 03 12:48
Seems reasonable.

Kornel @kornelski 12:49
but I've got feedback it's important to support packaging of "leaf" subprojects in a cargo workspace
(which happens to work fine if you point cargo metadata to the right Cargo.toml)

Pascal Hertleif @killercup 12:50
workspaces where there is only one binary crate seem common
at least on my machine :wink:

Kornel @kornelski 12:50
I do have use-case for packaging an LGPL part separately as a library
but I currently handle that manually

Ed Page @epage May 03 12:51
Licensing and legal notices are a fun can of worms I've not even tried to look into
Partially because I know someone who knows a lot about the intricacies and want to get him involved but he is currently doing crunch time at work

Kornel @kornelski 12:52
handling of crate licenses is an orthogonal problem, so I think it's fine to ignore
but one workspace producing separate packages for libraries and binaries needs to be supported

Ed Page @epage May 03 12:54
Well, and if we're doing things in the most ideal way, we'd also want to create distinct arch-agnostic packages from arch packages

Kornel @kornelski 12:54
In cargo-deb what I really want to do is to free user from knowing quirks of Debian
there are hundreds of tiny rules Debian has for packages ( see lintian)

Ed Page @epage May 03 12:54
Understandable though there are limits to that
I'm going through that for red hat right now as for $DAY_JOB I'm in the middle of creating ~50 packages
and will eventually get hit with debs

Kornel @kornelski 12:55
so for example I automatically apply the "changelog should be gzipped" rule

Ed Page @epage May 03 12:56
For handling distinct packages, one thought I was having was that the packaging configuration would be an array so people can declare independent packages. Initially, they'd have to turn off the default config and handle everything manually (with helpers) but as we work out the design, we could have ways to specify what goes in our out with basic rules

Kornel @kornelski 12:56
so if I were to use stager, I'd like to supply that information to stager, so that crate author doesn't have to gzip themselves, nor even configure something like extra docs-gzip stage

Pascal Hertleif @killercup 12:57
ideally, you'd have a set of well-known files, right?

Ed Page @epage May 03 12:58
Interesting use case and point.
stager doesn't know anything about debs and wouldn't know to do that.
You could do a transform on the stager results before processing them, adding the yet-to-be-made compression flag for when needed?

Pascal Hertleif @killercup 12:58
see a {CHANGELOG,RELEASES}{.md,.txt}, pick it up, and package it as a gz file

Ed Page @epage May 03 12:58
or if its in your built-in rules, youcould auto-set it?

Kornel @kornelski 13:00
yes, something like rules/file transformations inserted by the packaging crate.

Ed Page @epage May 03 13:00
Thanks for helping to find these different cases I'm not aware of yet :grinning:

Kornel @kornelski 13:00
There's more!
In debian there are separate -dbg crates
so if you have a binary with debugging symbols, you extract the symbols to a separate file, and produce two packages: binary + dbg
so user can add debug symbols at any time later
(the debug symbols package doesn't contain the binary, just the additional files)

Dylan DPC @Dylan-DPC 13:02
is all this documented somewhere?

Kornel @kornelski 13:02
mmstick/cargo-deb#62

Dylan DPC @Dylan-DPC 13:02
cool

Ed Page @epage May 03 13:02
@Dylan-DPC there are huge swathes of documentation. The problem is processing it and deciding what to handle handle, and hw

Dylan DPC @Dylan-DPC 13:02
fair. just some place we can refer later and tick some boxes

Ed Page @epage May 03 13:03
@kornelski speaking of challenges, are you handling multiarch?

Kornel @kornelski 13:03
I do support cross-compilation
cargo-deb almost works on Windows :smiley:

Ed Page @epage May 03 13:04
I assume you somehow get the rust target triplet and convert it to the debian triplet?

Kornel @kornelski 13:04
yes
there's a messy match somewhere in the code

Ed Page @epage May 03 13:05
https://github.com/mmstick/cargo-deb/blob/master/src/manifest.rs#L697
Hmm, not that one since it doesn't seem to create the triplet. I assume that helps create the triplet?

Kornel @kornelski 13:08
it's not the full triplet, since the linux- part is not required :wink:

Pascal Hertleif @killercup 13:09
i'm going to run off to get dinner before diving into the next meeting

Ed Page @epage May 03 13:09
Thanks!
Looking at my company's multiarch support, it seems the last part of the triplet can get special when dealing with arm

Pascal Hertleif @killercup 13:10
cc me on any issues you want me to raise/you have raised concerning other teams and i'll try to track them

Ed Page @epage May 03 13:10
Will do

Kornel @kornelski 13:11
yes, I've had bugs because of ARM abi

Ed Page @epage May 03 13:11

    yes, I've had bugs because of ARM abi

I've not dealt with our arm support but from what I've heard second hand, this statement is fully valid outside of this context :grinning:

Kornel @kornelski 13:11
the lesson was don't use std::env::ARCH
it's ambiguous on ARM
and cargo doesn't pass TARGET to lib.rs
so I've had to do ugly hack of writing TARGET to a file in OUT_DIR and reading it from there

Ed Page @epage May 03 13:14
So that ties your arch to what mode cargo-deb is compiled in?

Kornel @kornelski 13:14
It's used to know the default when user doesn't pass --target

Ed Page @epage May 03 13:15
Ok
Ideally we could find a way to know what target rustup currently has configured and we make that the default but that seems like a lot more investigation and work.
For now, I'll steel yours :grinning:

Kornel @kornelski 13:17
I'm waiting until rust adopts a better linker. My dream is to make Linux packages from my Mac :grinning:

Ed Page @epage May 03 13:17
That would be the dream

I probably need to head out. My plan is to organize the notes and post them to the CLI-WG git repo for review / submission.

Hopefully from there we can continue discussion on where we can share effort
btw have you given any thought to ppas or some sort?

Kornel @kornelski 13:20
In what sense?

Ed Page @epage May 03 13:21
How do you (and for how much you know) your users distributing their debs?
I'm wondering what we can do to make it easier for any random CLI author to make it easy for their usrs to install a version and then get updates without having to go back and downlaod

Kornel @kornelski 13:22
I know some use private repositories
but I haven't got any feature requests related to that, so I assume it's straightforward to publish once you have a deb
for me the biggest pain in distribution has been code signing

Ed Page @epage May 03 13:23
Yeah, haven't had to deal with that with rpms but I've been warned for when I do debs

Kornel @kornelski 13:25
with code signing I mean macos and windows actually. I distribute debs as-is (in debs signing is part of the repository, not the package, I think)

Ed Page @epage May 03 13:25
oh, right

Kornel @kornelski 13:26
on windows signature is in the exe
so it needs to be applied before packaging
on macos it's either directory adjacent to the exe or an extended file attirbute

Ed Page @epage May 03 13:27
I assume your interest in this is for tools besides cargo-deb or are you somehow using debs on windows?

Kornel @kornelski 13:27
the latter is pretty bad, since zip/tar removes extended attrs, so executables after unzipping stop working
I'm not using debs on windows
my interest is in distributing my apps on various platforms, linux being one, so I ended up improving cargo-deb to my liking :grinning:
but I'm also starting work on cargo-brew

Ed Page @epage May 03 13:28
Nice
I saw there is a cargo-wix. After I finish up with some of the my current stuff I want to look into that and address issues there.
Granted, for myself, I think I'd prefer a cargo-chocolatey

